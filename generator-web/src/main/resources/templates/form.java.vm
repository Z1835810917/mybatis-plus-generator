package ${parentName}.form.${modulePageName};
#foreach($pkg in ${table.importPackages})
import ${pkg};
#end
#if(${swagger})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${entityLombokModel})
import lombok.Getter;
import lombok.Setter;
#if(${chainModel})
import lombok.experimental.Accessors;
#end
import com.thunder.entity.BaseForm;
import com.thunder.annotation.QueryField;
import java.util.List;
import java.util.Date;
#end

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Getter
@Setter
#if(${chainModel})
@Accessors(chain = true)
#end
#end
#if(${swagger})
@ApiModel(value = "${entity}对象", description = "$!{table.comment}")
#end
public class ${formPageName} extends BaseForm{

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
    #if("$!field.comment" != "")
    /**
     * ${field.comment}
     */
    #if(${swagger})
    @ApiModelProperty("${field.comment}")
    #end
    #end
    private ${field.propertyType} ${field.propertyName};

    #if("$!field.propertyName" == "name")
	/**
    * 模糊查询名称
    */
    @ApiModelProperty(value = "模糊查询名称")
    private String nameLike;
    #end
#end
#if("$!field.propertyName" == "add_time")
    /**
     * 最小添加时间
     */
    @ApiModelProperty(value = "最小添加时间")
    private Date minAddTime;

    /**
     * 最大添加时间
     */
    @ApiModelProperty(value = "最大添加时间")
    private Date maxAddTime;
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")})
            #set($getprefix="is")
        #else
            #set($getprefix="get")
        #end

	public ${field.propertyType} ${getprefix}${field.capitalName}() {
			return ${field.propertyName};
			}

        #if(${chainModel})
		public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #else
		public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #end
			this.${field.propertyName} = ${field.propertyName};
        #if(${chainModel})
				return this;
        #end
			}
    #end
    ## --foreach end---
#end
## --end of #if(!${entityLombokModel})--

#if(${entityColumnConstant})
    #foreach($field in ${table.fields})
	public static final String ${field.name.toUpperCase()} = "${field.name}";

    #end
#end
#if(${activeRecord})
@Override
public Serializable pkVal() {
    #if(${keyPropertyName})
			return this.${keyPropertyName};
    #else
			return null;
    #end
		}

#end
#if(!${entityLombokModel})
@Override
public String toString() {
		return "${entity}{" +
    #foreach($field in ${table.fields})
        #if($!{foreach.index}==0)
				"${field.propertyName}=" + ${field.propertyName} +
        #else
				", ${field.propertyName}=" + ${field.propertyName} +
        #end
    #end
		"}";
		}
#end
}
