package ${parentName}.controller.${moduleName};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import lombok.AllArgsConstructor;
import cn.hutool.core.collection.CollectionUtil;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.bm.center.base.util.ResUtil;
import com.bm.center.base.util.CopyUtil;
import com.bm.center.base.response.ResponseEntity;
import com.bm001.util.PageUtils;
import com.bm001.util.CopyMybatisUtils;
import com.bm001.util.WrapperUtil;
import org.springframework.validation.annotation.Validated;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import ${parentName}.service.${moduleName}.$!{table.serviceName};
import ${parentName}.bo.${moduleName}.${entity};
import javax.validation.Valid;
import  ${parentName}.form.${moduleName}.$!{formPageName};
import ${parentName}.vo.${moduleName}.$!{voPageName};
import  ${parentName}.query.${moduleName}.$!{queryPageName};
import  ${parentName}.form.${moduleName}.$!{idFormPageName};
import ${parentName}.vo.${moduleName}.$!{operatingVoPageName};
import lombok.SneakyThrows;
import java.util.List;
import com.bm001.validator.UpdateAction;
/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@AllArgsConstructor
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "$!{table.comment}", tags = "$!{table.comment}接口")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final $!{table.serviceName} $!{moduleName}Service;

    /**
     * 分页列表
     *
     * @param $!{moduleName}form 　搜索关键词
     * @return Result
     */
    @SneakyThrows
    @PostMapping("/page")
    @ApiOperation(value = "$!{table.comment}列表", notes = "分页查询")
    public ResponseEntity<IPage<$!{caseModuleName}VO>> page(@RequestBody $!{caseModuleName}Form $!{moduleName}form) {
		QueryWrapper<${entity}> queryWrapper = WrapperUtil.entityToWrapper($!{moduleName}form, $!{caseModuleName}Query.class);
		//封装分页参数
		Page<${entity}> pageForm = PageUtils.getPage($!{moduleName}form);
		IPage<${entity}> page = $!{moduleName}Service.page(pageForm, queryWrapper);
		IPage<$!{caseModuleName}VO> pageVo = CopyMybatisUtils.transfer(page,$!{caseModuleName}VO.class);
		return ResUtil.getSuccessResult(pageVo);
    }

	/**
	 * $!{table.comment}信息
	 *
	 * @param $!{moduleName}IdForm Id
	 * @return Result
	 */
	@PostMapping("/get")
	@ApiOperation(value = "$!{table.comment}信息", notes = "根据ID查询")
	public ResponseEntity<$!{caseModuleName}VO> get(@RequestBody $!{caseModuleName}IdForm $!{moduleName}IdForm) {
		${entity} $!{table.entityPath} = $!{moduleName}Service.getById($!{moduleName}IdForm.getId());
		$!{caseModuleName}VO $!{moduleName}vo =CopyUtil.transfer($!{table.entityPath},$!{caseModuleName}VO.class);
		return ResUtil.getSuccessResult($!{moduleName}vo);
	}

	/**
	 * $!{table.comment}新增
	 *
	 * @param $!{moduleName}operatingVo 对象
	 * @return Result
	 */
	@PostMapping("/add")
	@ApiOperation(value = "$!{table.comment}新增", notes = "$!{table.comment}新增")
	public ResponseEntity add(@Valid @RequestBody $!{caseModuleName}OperatingVO $!{moduleName}operatingVo) {
		${entity} $!{table.entityPath} =CopyUtil.transfer($!{moduleName}operatingVo , ${entity}.class);
		boolean save = $!{moduleName}Service.save($!{table.entityPath});
		return ResUtil.getSuccessResult(save);
	}

	/**
	 * $!{table.comment}修改
	 *
	 * @param $!{moduleName}operatingVo 对象
	 * @return Result
	 */
	@PostMapping("/update")
	@ApiOperation(value = "$!{table.comment}修改", notes = "$!{table.comment}修改")
	public ResponseEntity update(@Validated(UpdateAction.class) @RequestBody $!{caseModuleName}OperatingVO $!{moduleName}operatingVo ) {
		${entity} $!{table.entityPath} =CopyUtil.transfer($!{moduleName}operatingVo , ${entity}.class);
		boolean save = $!{moduleName}Service.updateById($!{table.entityPath});
		return ResUtil.getSuccessResult(save);
	}
	/**
	 * $!{table.comment}删除
	 *
	 * @param $!{moduleName}IdForm  id对象
	 * @return Result
	 */
	@PostMapping("/del")
	@ApiOperation(value = "$!{table.comment}删除", notes = "$!{table.comment}删除")
	public ResponseEntity del(@RequestBody $!{caseModuleName}IdForm $!{moduleName}IdForm) {
		boolean save = $!{moduleName}Service.removeById($!{moduleName}IdForm.getId());
		return ResUtil.getSuccessResult(save);
	}

}

#end